<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-time Map Marker</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.css" />
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 20px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 25px;
            font-size: 2.2em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }

        #map {
            height: 500px;
            width: 100%;
            border-radius: 10px;
            border: 3px solid #ddd;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 25px;
        }

        .status-card, .coords-card {
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .status-card {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
        }

        .coords-card {
            background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            color: white;
        }

        .status-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .status-indicator {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background: #ff4757;
            display: inline-block;
            margin-right: 10px;
            animation: pulse 2s infinite;
        }

        .status-indicator.connected {
            background: #2ed573;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .coordinates {
            font-family: 'Courier New', monospace;
            background: rgba(255,255,255,0.2);
            padding: 10px;
            border-radius: 6px;
            display: block;
            margin: 5px 0;
            font-weight: bold;
        }

        .user-count {
            font-size: 1.5em;
            font-weight: bold;
        }

        .instructions {
            margin-top: 20px;
            padding: 20px;
            background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
            border-radius: 10px;
            border-left: 5px solid #ff9f43;
        }

        @media (max-width: 768px) {
            .info-grid {
                grid-template-columns: 1fr;
            }

            body {
                padding: 10px;
            }

            .container {
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üåç Real-time Map Synchronization</h1>

        <div id="map"></div>

        <div class="info-grid">
            <div class="status-card">
                <div class="status-header">
                    <div>
                        <span id="connectionStatus" class="status-indicator"></span>
                        <span id="statusText">Connecting...</span>
                    </div>
                    <div class="user-count">
                        üë• <span id="userCount">0</span>
                    </div>
                </div>
                <p><strong>Status:</strong> Real-time synchronization with Socket.IO server</p>
            </div>

            <div class="coords-card">
                <h3>üìç Current Position</h3>
                <span class="coordinates">Lat: <span id="currentLat">-7.4704</span></span>
                <span class="coordinates">Lng: <span id="currentLng">110.2177</span></span>
            </div>
        </div>

        <div class="instructions">
            <h3>üéØ Instructions</h3>
            <p><strong>Drag the red marker</strong> on the map to change its position. The marker will automatically synchronize across all connected browsers in real-time!</p>
            <p>Open this page in multiple browser windows or tabs to see the synchronization in action.</p>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script>
        // Initialize Socket.IO connection
        const socket = io();

        // Initialize map centered on Magelang, Central Java
        const map = L.map('map').setView([-7.4704, 110.2177], 13);

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            maxZoom: 19
        }).addTo(map);

        // Use a simple PNG marker that will always be visible
        const redMarkerIcon = L.icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        // Create a single marker with the red icon
        const marker = L.marker([-7.4704, 110.2177], {
            draggable: true,
            title: 'Drag me to synchronize!',
            icon: redMarkerIcon
        }).addTo(map);

        marker.bindPopup('üöÄ Drag me to sync with other browsers!').openPopup();

        // Variables to track state
        let isConnected = false;
        let isUpdatingFromSocket = false;

        // Socket.IO event handlers
        socket.on('connect', () => {
            console.log('‚úÖ Connected to server');
            isConnected = true;
            updateConnectionStatus();
        });

        socket.on('disconnect', () => {
            console.log('‚ùå Disconnected from server');
            isConnected = false;
            updateConnectionStatus();
        });

        socket.on('markerMove', (data) => {
            console.log('üìç Received marker position:', data);
            isUpdatingFromSocket = true;

            // Simply update marker position - no icon manipulation
            marker.setLatLng([data.lat, data.lng]);
            updateCoordinateDisplay(data.lat, data.lng);

            setTimeout(() => {
                isUpdatingFromSocket = false;
            }, 100);
        });

        socket.on('userCount', (count) => {
            document.getElementById('userCount').textContent = count;
        });

        // Update connection status UI
        function updateConnectionStatus() {
            const indicator = document.getElementById('connectionStatus');
            const statusText = document.getElementById('statusText');

            if (isConnected) {
                indicator.classList.add('connected');
                statusText.textContent = 'Connected';
            } else {
                indicator.classList.remove('connected');
                statusText.textContent = 'Disconnected';
            }
        }

        // Update coordinate display
        function updateCoordinateDisplay(lat, lng) {
            document.getElementById('currentLat').textContent = lat.toFixed(6);
            document.getElementById('currentLng').textContent = lng.toFixed(6);
        }

        // Handle marker drag events
        marker.on('dragstart', (e) => {
            console.log('üéØ Started dragging marker');
            marker.closePopup();
        });

        marker.on('drag', (e) => {
            const position = e.target.getLatLng();
            updateCoordinateDisplay(position.lat, position.lng);
        });

        marker.on('dragend', (e) => {
            const position = e.target.getLatLng();
            console.log('üèÅ Marker drag ended at:', position);

            updateCoordinateDisplay(position.lat, position.lng);

            // Emit to server only if not updating from socket
            if (isConnected && !isUpdatingFromSocket) {
                socket.emit('markerMove', {
                    lat: position.lat,
                    lng: position.lng
                });
                console.log('üì§ Sent position to server');
            }

            // Show success popup
            marker.bindPopup('‚úÖ Position synchronized!').openPopup();
            setTimeout(() => marker.closePopup(), 2000);
        });

        // Initialize coordinate display
        const initialPos = marker.getLatLng();
        updateCoordinateDisplay(initialPos.lat, initialPos.lng);

        // Add hover effects
        marker.on('mouseover', function() {
            if (!this.isDragging) {
                this.bindPopup('üñ±Ô∏è Click and drag to move marker').openPopup();
            }
        });

        marker.on('mouseout', function() {
            if (!this.isDragging) {
                setTimeout(() => this.closePopup(), 1000);
            }
        });

        console.log('üó∫Ô∏è Real-time map application initialized');
    </script>
</body>
</html>
server.js
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
// const path = require('path');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Serve static files (HTML, CSS, JS)
app.use(express.static('public'));

// Default marker position
let currentMarkerPosition = {
  lat: -7.4704,
  lng: 110.2177
};

// Track connected users
let connectedUsers = 0;

// Socket.IO connection handling
io.on('connection', (socket) => {
  connectedUsers++;
  console.log(`User connected. Total users: ${connectedUsers}`);

  // Send current position to newly connected user
  socket.emit('markerMove', currentMarkerPosition);

  // Broadcast user count to all clients
  io.emit('userCount', connectedUsers);

  // Handle marker movement
  socket.on('markerMove', (data) => {
    console.log('Marker moved to:', data);
    currentMarkerPosition = data;

    // Broadcast to ALL clients (including sender)
    io.emit('markerMove', data);
  });

  // Handle user disconnect
  socket.on('disconnect', () => {
    connectedUsers--;
    console.log(`User disconnected. Total users: ${connectedUsers}`);
    io.emit('userCount', connectedUsers);
  });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ Server running on http://localhost:${PORT}`);
  console.log(`üìÅ Place client files in 'public' folder`);
});
